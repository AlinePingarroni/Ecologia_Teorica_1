msleep_summary_2 <- summarize(msleep_grouped_2, count = n())
print(msleep_summary_2)
msleep_grouped_3 <- group_by(msleep, vore)
msleep_summary_3 <- summarize(msleep_grouped_3, mean_bodywt = mean(bodywt, na.rm = TRUE))
print(msleep_summary_3)
msleep_grouped_2<- group_by(msleep, order)
msleep_summary_2 <- summarize(msleep_grouped_2, count = n())
print(msleep_summary_2)
msleep_grouped_3 <- group_by(msleep, vore)
msleep_summary_3 <- summarize(msleep_grouped_3, mean_bodywt = mean(bodywt, na.rm = TRUE))
print(msleep_summary_3)
# Ejercicio 5: Ordenar datos con arrange()
# -------------------------------------------------------
# Ordenar por el total de horas de sueño de menor a mayor
msleep_sorted <- arrange(msleep, sleep_total) #arrange ordena de menor a mayor
head(msleep_sorted)
# Ordenar por peso corporal en orden descendente
msleep_sorted_2 <- arrange(msleep, desc(bodywt)) #desc en orden descendente
head(msleep_sorted_2)
msleep_sorted_3 <- arrange(msleep, vore, desc(sleep_total))
head(msleep_sorted_3)
# Ejercicio 6: Contar valores con count()
# -------------------------------------------------------
# Contar el número de animales por tipo de dieta
vore_count <- count(msleep, vore) #count es contar valores
print(vore_count)
?tapply
setwd("~/")
library(faraway) ### este paquete tiene la base datos "coagulation"
library(ISwR)   ### base de datos "red.cell.folate"
install.packages("faraway")
library(faraway) ### este paquete tiene la base datos "coagulation"
install.packages("ISwR")
library(ISwR)   ### base de datos "red.cell.folate"
#Inspeccion visual
boxplot(coag~diet,data=coagulation)
#Analisis estadistico: ANOVA DE 1 VIA
m1 <-lm(coag~diet,data=coagulation)
### pedimos la tabla de ANOVA
anova(m1)
### verificvamos la normalidad en los residuales
shapiro1 <- shapiro.test(residuals(m1))
### pedimos la salida
shapiro1
#supuestos del modelo, figuras
par(mfrow=c(2,2))
#esto es para dividir la pantalla de figuras en 2 columnas y 2 filas
plot(m1)
# 2. Homogeneidad de varianzas
# Prueba de Levene
library(car)
install.packages("car")
# 2. Homogeneidad de varianzas
# Prueba de Levene
library(car)
library(car)
levene_test1 <- leveneTest(coag~diet,data=coagulation)
levene_test1
levene_test1 <- leveneTest(coag~diet,data=coagulation)
levene_test1
### revisamos los estimados del modelo
summary(m1)
########### forma rapida de gráficar los Valores predichos (estimados) del modelo
efectos <-allEffects(m1)
########### forma rapida de gráficar los Valores predichos (estimados) del modelo
efectos <-allEffects(m1)
plot(efectos)
posthoc1 <- glht(m1, linfct = mcp(diet = "Tukey"))
install.packages("effects")
########### forma rapida de gráficar los Valores predichos (estimados) del modelo
efectos <-allEffects(m1)
plot(efectos)
## a) Usa la base red.cell.folate contenida en el paquete ISwR
## usa la funcion help para informarte sobre de que trata la base de datos
## b) realiza una inspeccion visual en las variables y describe de manera general lo que observas
names(red.cell.folate)
names(red.cell.folate)
summary(red.cell.folate)
dim(red.cell.folate)
view(red.cell.folate)
## c) Realiza un analisis de varianza (explica la tabla de ANOVA) determinando si el tipo de ventilación usada
## en pacientes afecta los niveles de folato en sangre
ml <-lm(coag-diet,data=coagulation)
## c) Realiza un analisis de varianza (explica la tabla de ANOVA) determinando si el tipo de ventilación usada
## en pacientes afecta los niveles de folato en sangre
m1 <-lm(coag~diet,data=coagulation)
anova(m1)
## a) Usa la base red.cell.folate contenida en el paquete ISwR
## usa la funcion help para informarte sobre de que trata la base de datos
## b) realiza una inspeccion visual en las variables y describe de manera general lo que observas
library(ISwR)
## c) Realiza un analisis de varianza (explica la tabla de ANOVA) determinando si el tipo de ventilación usada
## en pacientes afecta los niveles de folato en sangre
m1 <-lm(folate~ventilation,data=folate)
## c) Realiza un analisis de varianza (explica la tabla de ANOVA) determinando si el tipo de ventilación usada
## en pacientes afecta los niveles de folato en sangre
m1 <-lm(folate~ventilation,data=red.cell.folate)
anova(m1)
boxplot(folate~ventilation,data=red.cell.folate)
shapiro1 <- shapiro.test(residuals(m1))
shapiro1
par(mfrow=c(2,2))
plot(m1)
library(car)
levene_test1 <- leveneTest(folate~ventilation,data=red.cell.folate)
levene_test1
posthoc1 <- glht(m1, linfct = mcp(diet = "Tukey"))
install.packages("glht")
levene_test1 <- leveneTest(folate~ventilation,data=red.cell.folate)
levene_test1
posthoct <- glht(mlineal, linfct = mcp(ventilation = "Tukey"))
## e) ¿Es necesario realizar comparaciones multiples entre grupo?, si es así que grupos difieren entre si?
glht(mlineal, linfct = mcp(ventilation = "Tukey"))
## f) grafíca los valores predichos y explica la figura
summary(posthoc)
## g) también grafica los I.C.
par(mfrow=c(1,1))
plot(confrint(posthoc))
names(red.cell.folate)
summary(red.cell.folate)
dim(red.cell.folate)
view(red.cell.folate)
# Cargar las librerías necesarias
library(ggplot2)
# Simulando datos de área de islas (km²) y número de especies
set.seed(123)
area <- runif(30, min = 1, max = 100) # área de islas entre 1 y 100 km²
num_species <- 10 + 0.5 * area + rnorm(30, mean = 0, sd = 5) # número de especies con algo de variación
# Crear un data frame para los datos
data_islands <- data.frame(area, num_species)
# Ver las primeras filas del conjunto de datos
head(data_islands)
# Resumen estadístico básico
summary(data_islands)
# Comprobar si hay valores faltantes
sum(is.na(data_islands))
# Visualizar la distribución de las variables
ggplot(data_islands, aes(x = area)) +
geom_histogram(binwidth = 10, fill = "lightblue", color = "black") +
labs(title = "Distribución del Área de las Islas", x = "Área de la Isla (km²)")
ggplot(data_islands, aes(x = num_species)) +
geom_histogram(binwidth = 5, fill = "lightgreen", color = "black") +
labs(title = "Distribución del Número de Especies", x = "Número de Especies")
# Relación entre el área y el número de especies (gráfico de dispersión simple)
ggplot(data_islands, aes(x = area, y = num_species)) +
geom_point(color = "blue", size = 3) +
labs(title = "Relación entre Área de la Isla y Número de Especies",
x = "Área de la Isla (km²)",
y = "Número de Especies")
# Ajustar el modelo de regresión lineal
modelo_islas <- lm(num_species ~ area, data = data_islands)
# Resumen del modelo
summary(modelo_islas)
# Visualizar la regresión lineal con ggplot2
ggplot(data_islands, aes(x = area, y = num_species)) +
geom_point(color = "blue", size = 3) + # Puntos de datos
geom_smooth(method = "lm", se = TRUE, color = "red") + # Línea de regresión con intervalo de confianza
labs(title = "Relación entre Área de la Isla y Número de Especies",
x = "Área de la Isla (km²)",
y = "Número de Especies") +
theme_minimal()
# Visualizar la regresión lineal con ggplot2
ggplot(data_islands, aes(x = area, y = num_species)) +
geom_point(color = "blue", size = 3) + # Puntos de datos
geom_smooth(method = "lm", se = TRUE, color = "red") + # Línea de regresión con intervalo de confianza
labs(title = "Relación entre Área de la Isla y Número de Especies",
x = "Área de la Isla (km²)",
y = "Número de Especies") +
theme_minimal()
# Diagnóstico del modelo
par(mfrow = c(2, 2))
plot(modelo_islas)
#Ejercicio 1 de regresión lineal
#Precipitación anual (mm) y biomasa vegetal (kg/m²)
library(ggplot2)
# Simulando datos de precipitación anual (mm) y biomasa vegetal (kg/m²)
set.seed(456)
precipitation <- runif(40, min = 300, max = 1500) # precipitación anual entre 300 y 1500 mm
biomass <- 0.02 * precipitation + rnorm(40, mean = 0, sd = 1.5) # biomasa con algo de variación
# Crear un data frame para los datos
data_biomass <- data.frame(precipitation, biomass)
# Ver las primeras filas del conjunto de datos
head(data_biomass)
# Resumen estadístico básico
summary(data_biomass)
# Comprobar si hay valores faltantes
sum(is.na(data_biomass))
# Visualizar la distribución de las variables
ggplot(data_biomass, aes(x = precipitation)) +
geom_histogram(binwidth = 100, fill = "lightblue", color = "black") +
labs(title = "Distribución de la Precipitación Anual", x = "Precipitación Anual (mm)")
ggplot(data_biomass, aes(x = biomass)) +
geom_histogram(binwidth = 0.5, fill = "lightgreen", color = "black") +
labs(title = "Distribución de la Biomasa Vegetal", x = "Biomasa Vegetal (kg/m²)")
# Relación entre la precipitación y la biomasa (gráfico de dispersión simple)
ggplot(data_biomass, aes(x = precipitation, y = biomass)) +
geom_point(color = "green", size = 3) +
labs(title = "Relación entre Precipitación y Biomasa Vegetal",
x = "Precipitación Anual (mm)",
y = "Biomasa Vegetal (kg/m²)")
# Ajustar el modelo de regresión lineal
modelo_biomass <- lm(biomass ~ precipitation, data = data_biomass)
# Resumen del modelo
summary(modelo_biomass)
# Visualizar la regresión lineal con ggplot2
ggplot(data_biomass, aes(x = precipitation, y = biomass)) +
geom_point(color = "green", size = 3) + # Puntos de datos
geom_smooth(method = "lm", se = TRUE, color = "purple") + # Línea de regresión con intervalo de confianza
labs(title = "Relación entre Precipitación y Biomasa Vegetal",
x = "Precipitación Anual (mm)",
y = "Biomasa Vegetal (kg/m²)") +
theme_minimal()
# Diagnóstico del modelo
par(mfrow = c(2, 2))
plot(modelo_biomass)
ppois(16, lambda=12)   # lower tail
ppois(16, lambda=12, lower=FALSE)   # upper tail
pppois<-(ppois(16, lambda=12, lower=FALSE))*100 ###porcentaje de que pasan 17 o m?s carros en un minuto. #es el porcentaje, por eso x100
pppois<-(ppois(16, lambda=12, lower=FALSE))*100 ###porcentaje de que pasan 17 o m?s carros en un minuto. #es el porcentaje, por eso x100
pppois<-(ppois(16, lambda=12, lower=FALSE))*100 ###porcentaje de que pasan 17 o m?s carros en un minuto. #es el porcentaje, por eso x100
pppois<-(ppois(16, lambda=12, lower=FALSE))*100 ###porcentaje de que pasan 17 o m?s carros en un minuto. #es el porcentaje, por eso x100
pppois<-(ppois(16, lambda=12, lower=FALSE))*100 ###porcentaje de que pasan 17 o m?s carros en un minuto. #es el porcentaje, por eso x100
pppois
###Answer
##If there are twelve cars crossing a bridge per minute on average,
##the probability of having seventeen or more cars crossing the bridge in a
##particular minute is 10.1%.
dpois(16, lambda=100)
dpois
pnorm(84, mean=72, sd=15.2, lower.tail=FALSE)
pnorm(84, mean=72, sd=15.2, lower.tail=T)
#en lugar de superior o inferior puede ser solo S o I
superior*100
x <- -4:4
dnorm(x, mean = 1, sd = 3)
dnorm(x, mean = c(1, 2), sd = c(3, 4))
dnorm(x, mean = 1, sd = 3)
x
par(mfrow = c(1, 2))
# Grid of X-axis values
x <- seq(-4, 8, 0.1)
#-----------------------------------------
# Misma desviaci??n standard, diferente media
#-----------------------------------------
# Mean 0, sd 1
plot(x, dnorm(x, mean = 0, sd = 1), type = "l",
ylim = c(0, 0.6), ylab = "", lwd = 2, col = "red")
# Mean 3, sd 1
lines(x, dnorm(x, mean = 3, sd = 1), col = "blue", lty = 1, lwd = 2)
# Addicionar leyendas
legend("topright", legend = c("0 1", "3 1"), col = c("red", "blue"),
title = expression(paste(mu, " ", sigma)),
title.adj = 0.9, lty = 1, lwd = 2, box.lty = 0)
#-----------------------------------------
# Mismo promedio, diferente desviaci??n est??ndar
#-----------------------------------------
# Mean 1, sd 1
plot(x, dnorm(x, mean = 1, sd = 1), type = "l",
ylim = c(0, 1), ylab = "", lwd = 2, col = "red")
# Mean 1, sd 0.5
lines(x, dnorm(x, mean = 1, sd = 0.5), col = "blue", lty = 1, lwd = 2)
# Addicionar leyenda
legend("topright", legend = c("1 1", "1 0.5"), col = c("red", "blue"),
title = expression(paste(mu, " ", sigma)),
title.adj = 0.75, lty = 1, lwd = 2, box.lty = 0)
pnorm(q,
mean = 0,
sd = 1,
lower.tail = TRUE, # If TRUE, probabilities are P(X <= x), or P(X > x) otherwise
log.p = FALSE)     # If TRUE, probabilities are given as log
pnorm(0, mean = 0, sd = 1) # 0.5
Mean <- 1000
Sd <- 10
# X grid for non-standard normal distribution
x <- seq(-3, 3, length = 100) * Sd + Mean
# Density function
f <- dnorm(x, Mean, Sd)
plot(x, f, type = "l", lwd = 2, col = "blue", ylab = "", xlab = "Weight")
abline(v = Mean) # Vertical line on the mean
set.seed(123)n <- 100
set.seed(123)n <- 100
set.seed(123)
n <- 100
número de ensayossize <- 10
set.seed(123)
n <- 100
#número de ensayos
size <- 10
# número de ensayos por observación
x <- rbinom(n, size = size, prob = 0.5)
#éxitos
data_binom <- data.frame(successes = x, trials = size)
#Modelo
modelo_binom <- glm(cbind(successes, trials - successes) ~ 1, family = binomial, data = data_binom)
summary(modelo_binom)
#Ejemplo 2: efecto de la temperatura sobre la tasa de supervivencia
# Datos simulados
temperatura <- seq(15, 30, length.out = n)
supervivencia <- rbinom(n, size = 1, prob = plogis(0.1 * (temperatura - 20)))
data_binom2 <- data.frame(temperatura = temperatura, supervivencia = supervivencia)
# Modelo
modelo_binom2 <- glm(supervivencia ~ temperatura, family = binomial, data = data_binom2)
summary(modelo_binom2)
# Datos simulados
habitat <- factor(sample(c("Bosque", "Pradera"), n, replace = TRUE))
presencia <- rbinom(n, size = 1, prob = ifelse(habitat == "Bosque", 0.7, 0.3))
data_binom3 <- data.frame(habitat = habitat, presencia = presencia)
# Modelo
modelo_binom3 <- glm(presencia ~ habitat, family = binomial, data = data_binom3)
summary(modelo_binom3)
# Datos simulados
parcelas <- seq(1:100)
conteo_especies <- rpois(100, lambda = 5) # conteos de especies
data_poisson <- data.frame(parcelas = parcelas, conteo_especies = conteo_especies)
# Modelo
modelo_poisson <- glm(conteo_especies ~ parcelas, family =  poisson(link = "log"), data = data_poisson)
summary(modelo_poisson)
tiempo_observacion <- seq(1:100)
tiempo_observacion <- seq(1:100)
conteo_aves <- rpois(100, lambda = tiempo_observacion / 10)
data_poisson2 <- data.frame(tiempo_observacion =  tiempo_observacion, conteo_aves = conteo_aves)
# Modelo
modelo_poisson2 <- glm(conteo_aves ~ tiempo_observacion,  family = poisson(link = "log"), data = data_poisson2)
summary(modelo_poisson2)
# Datos simulados
habitat_insectos <- factor(sample(c("Bosque", "Campo"), n, replace  = TRUE))
conteo_insectos <- rpois(n, lambda = ifelse(habitat_insectos ==  "Bosque", 10, 5))
data_poisson3 <- data.frame(habitat_insectos = habitat_insectos,  conteo_insectos = conteo_insectos)
# Modelo
modelo_poisson3 <- glm(conteo_insectos ~ habitat_insectos, family = poisson(link = "log"), data = data_poisson3)
summary(modelo_poisson3)
library(MASS)
set.seed(123)
n <- 100 # número de ensayos
condiciones_ambientales <- factor(sample(c("Baja", "Alta"), n, replace = TRUE))
conteo_peces_negativa <- rnbinom(n, size = 5, mu = 10)
data_negativa <- data.frame(condiciones_ambientales =  condiciones_ambientales, conteo_peces = conteo_peces_negativa)
# Modelo usando glm.nb()
modelo_negativa <- glm.nb(conteo_peces ~ condiciones_ambientales, data =  data_negativa)
summary(modelo_negativa)
set.seed(123) # Para reproducibilidad
n <- 100 # número de ensayos
uso_suelo <- factor(sample(c("Agrícola", "Natural"), n, replace =  TRUE))
diversidad_especies_negativa <- rnbinom(n, size = 4, mu = 15)
data_negativa2 <- data.frame(uso_suelo = uso_suelo, diversidad_especies = diversidad_especies_negativa)
# Modelo usando glm.nb()
modelo_negativa2 <- glm.nb(diversidad_especies ~ uso_suelo,  data = data_negativa2)
summary(modelo_negativa2)
set.seed(123) # Para reproducibilidad
n <- 100
epoca_año <- factor(sample(c("Primavera", "Verano", "Otoño", "Invierno"), n, replace=TRUE))
conteo_mariposas_negativa <- rnbinom(n, size=6, mu=20)
data_negativa3 <- data.frame(epoca_año=epoca_año, conteo_mariposas=conteo_mariposas_negativa)
# Modelo usando glm.nb()
modelo_negativa3 <- glm.nb(conteo_mariposas ~ epoca_año, data=data_negativa3)
summary(modelo_negativa3)
# Datos simulados
tratamiento_planta <- factor(sample(c("Control", "Fertilizado"), n, replace=TRUE))
altura_planta_gaussiana <- rnorm(n, mean=50 + as.numeric(tratamiento_planta)*10 , sd=5)
data_gaussiana <- data.frame(tratamiento_planta=tratamiento_planta, altura_planta=altura_planta_gaussiana)
# Modelo
modelo_gaussiana <- glm(altura_planta ~ tratamiento_planta ,  family=gaussian(link="identity"), data=data_gaussiana)
summary(modelo_gaussiana)
pH_suelo <- seq(4.5 ,7.5 ,length.out=n)
crecimiento_vegetal_gaussiano<- rnorm(n , mean=pH_suelo*10 , sd=2)
data_gaussiana2<-data.frame(pH_suelo=pH_suelo , crecimiento_vegetal=crecimiento_vegetal_gaussiano)
# Modelo
modelo_gaussiana2<-glm(crecimiento_vegetal~pH_suelo ,family=gaussian(link="identity") ,data=data_gaussiana2 )
summary(modelo_gaussiana2 )
condicion_alimenticia<-factor(sample(c("Baja","Alta") ,n ,replace=T))
peso_animales_gaussiano<-rnorm(n ,mean=30 + as.numeric(condicion_alimenticia)*15 ,sd=4)
data_gaussiana3<-  data.frame(condicion_alimenticia=condicion_alimenticia ,peso_animales=peso_animales_gaussiano)
# Modelo
modelo_gaussiana3<-glm(peso_animales~condicion_alimenticia ,family=gaussian(link="identity") ,data=data_gaussiana3 )
summary(modelo_gaussiana3 )
# Datos simulados
tiempo_germinacion_gamma<-rgamma(n ,shape=5 ,scale=0.5)
data_gamma<-  data.frame(tiempo_germinacion=tiempo_germinacion_gamma)
# Modelo
modelo_gamma<-glm(tiempo_germinacion~1,family=Gamma(link="log")  ,data=data_gamma )
summary(modelo_gamma )
consumo_agua_gamma<-rgamma(n ,shape=7 ,scale=0.8)
data_gamma2<-  data.frame(consumo_agua=consumo_agua_gamma)
# Modelo
modelo_gamma2<-glm(consumo_agua~1,family=Gamma(link="log") ,data=data_gamma2 )
summary(modelo_gamma2 )
produccion_biomasa_gamma<-rgamma(n ,shape=6 ,scale=1.5)
data_gamma3<-  data.frame(produccion_biomasa=produccion_biomasa_gamma)
# Modelo
modelo_gamma3<-  glm(produccion_biomasa~1,family=Gamma(link="log")  ,data=data_gamma3 )
summary(modelo_gamma3 )
# Lista de paquetes
required_packages <- c("tidyverse", "palmerpenguins", "tidymodels", "kableExtra", "rnaturalearth", "rnaturalearthdata", "patchwork","ggrepel", "GGally", "gt")
# Identificar paquetes que no estan instalados
missing_packages <- required_packages[!(required_packages %in% installed.packages()[,"Package"])]
# Instalar paquetes faltantes
if (length(missing_packages) > 0) {install.packages(missing_packages)}
# Cargar paquetes
invisible(lapply(required_packages, library, character.only = TRUE))
library(vegan)
library(factoextra)
install.packages(vegan)
install.packages(factoextra)
install.packages(vegan)
install.packages("vegan")
install.packages("factoextra")
library(vegan)
library(factoextra)
# Cargar base
data(varespec)#Abundancia
data(varechem)#Ambientales
View(varespec)
View(varechem)
# Exploramos la estructura de los datos
dim(varespec)
dim(varechem)
summary(rowSums(varespec))
varespec_scaled <- scale(varespec)  # Para standarizar la igualdad de peso entre especies
dist_euc <- dist(varespec_scaled, method = "euclidean") #dist calcula la matriz de distancias a la base de datos modificada por el método de elección, en este caso euclidean.
dist_man <- dist(varespec_scaled, method = "manhattan")
dist_man <- dist(varespec_scaled, method = "manhattan")
# Exploramos un segmento de la matriz
dist_matrix_df <- as.matrix(dist_euc)[1:5, 1:5]
dist_matrix_df
# Los que se ve en la matriz es el resultado de abundancias de las especies por sitios.
dist_matrix_df <- as.matrix(dist_man)[1:5, 1:5]
dist_matrix_df
# Agrupamiento jerárquico
cluster_euc <- hclust(dist_euc, method = "ward.D2") #se asigna el objeto con el cluster, luego la matriz de datos y el método de ligamiento
cluster_man <- hclust(dist_man, method = "ward.D2")
plot(cluster_man, main = "Dendrograma (Manhattan)", xlab = "Sitios", sub = "")
plot(cluster_euc, main = "Dendrograma (Euclidiana)", xlab = "Sitios", sub = "")
#Visualización e interpretación de dendogramas
par(mfrow = c(1,2)) #visualización de gráficas
plot(cluster_man, main = "Dendrograma (Manhattan)", xlab = "Sitios", sub = "")
plot(cluster_euc, main = "Dendrograma (Euclidiana)", xlab = "Sitios", sub = "")
#Visualización e interpretación de dendogramas
par(mfrow = c(1,2)) #visualización de gráficas
plot(cluster_euc, main = "Dendrograma (Euclidiana)", xlab = "Sitios", sub = "")
plot(cluster_man, main = "Dendrograma (Manhattan)", xlab = "Sitios", sub = "")
install.packages("factoextra")
install.packages("cluster")
install.packages("latex2exp")
install.packages("latexdiffr")
install.packages("latexpdf")
install.packages("latexSymb")
install.packages("tinytex")
install.packages("tinytex")
install.packages("factoextra")
install.packages("GGally")
install.packages("ggcorrplot")
install.packages("FactoMineR")
install.packages ("rgbif")
install.packages ("TeachingDemos")
install.packages ("dismo")
install.packages ("biomod2")
install.packages ("sp")
install.packages ("raster")
install.packages ("usdm")
install.packages ("ENMeval")
install.packages ("foreign")
install.packages ("spocc")
install.packages ("corrplot")
install.packages ("XML")
install.packages ("dplyr")
install.packages ("reshape")
install.packages ("CoordinateCleaner")
install.packages ("sf")
install.packages ("tidyr")
install.packages("C:/proyecto_sig/data_depuration_gbif-main/rgeos_0.6-4.tar.gz", repos = NULL, type = "source")
install.packages("C:/proyecto_sig/data_depuration_gbif-main/maptools_1.1-8.tar.gz", repos = NULL, type = "source")
setwd("E:\\Quinto Semestre\\Ecología teórica\\Expo_clase_genetica")
## Datos (o de donde extraeremos nuestros datos)
getwd() # primero checamos donde estamos, y luego elegiremos la carpeta de ineterés (donde estan todos los archivos)
names(Wild)
Wild<-read.csv("Wild_EFN_FV.csv") # Aquí estamos trayendo la base de datos sobre los individuos silvestres que fueron de control o "inducidos" por MeJA
library(multcomp) #Este paquete hace pruebas simultáneas e intervalos de confianza para hipótesis lineales generales en modelos paramétricos, incluyendo modelos lineales, lineales generalizados, lineales de efectos mixtos y de supervivencia.
library(dplyr) #Es un paquete que permite la manipulación de datos
library ( ggplot2 ) #Este paquete es para crear gráficos bonitos :)
library("wesanderson")# Paletas generadas principalmente a partir de películas de 'Wes Anderson', director de películas como: "El Gran Hotel Budapest"
library(multcomp) #Este paquete hace pruebas simultáneas e intervalos de confianza para hipótesis lineales generales en modelos paramétricos, incluyendo modelos lineales, lineales generalizados, lineales de efectos mixtos y de supervivencia.
library(dplyr) #Es un paquete que permite la manipulación de datos
library ( ggplot2 ) #Este paquete es para crear gráficos bonitos :)
library("wesanderson")# Paletas generadas principalmente a partir de películas de 'Wes Anderson', director de películas como: "El Gran Hotel Budapest"
## Datos (o de donde extraeremos nuestros datos)
getwd() # primero checamos donde estamos, y luego elegiremos la carpeta de ineterés (donde estan todos los archivos)
setwd("D:/Quinto Semestre/Ecología teórica/Expo_clase_genetica/EFN Treatment") #Modificalo, pero ten en cuenta que la última terminación: "EFN Treatment" es lo que debe mantenerse
setwd("E:\\Quinto Semestre\\Ecología teórica\\Expo_clase_genetica")
Wild<-read.csv("Wild_EFN_FV.csv") # Aquí estamos trayendo la base de datos sobre los individuos silvestres que fueron de control o "inducidos" por MeJA
Wild<-read.csv("Wild_EFN_FV.csv") # Aquí estamos trayendo la base de datos sobre los individuos silvestres que fueron de control o "inducidos" por MeJA
setwd("E:\\Quinto Semestre\\Ecología teórica\\Expo_clase_genetica\\EFN Treatment")
Wild<-read.csv("Wild_EFN_FV.csv") # Aquí estamos trayendo la base de datos sobre los individuos silvestres que fueron de control o "inducidos" por MeJA
names(Wild)
Wild<-read.csv("Wild_EFN_FV.csv") # Aquí estamos trayendo la base de datos sobre los individuos silvestres que fueron de control o "inducidos" por MeJA
names(Wild)
Wild$Treatment <- as.factor(Wild$Treatment)# Convertirlo la variable "Treatments" a factor (confía en el proceso!)
summary(WildAllVar) #Pedimos los resultados del modelo lineal generalizado
WildAllVar<- glm(Wild$Volumen.en.ug~Treatment, data = Wild, family = "quasipoisson")# Hacemos un modeo lineal generalizado, donde ponemos la variable de volumen en respuesta al tratamiento, y usamos el quiasipoisson
summary(WildAllVar) #Pedimos los resultados del modelo lineal generalizado
cld(Tukey_glmw, Letters=letters) #Asignamos letras diferentes para los dos tipos de tratamientos
Tukey_glmw<- glht(WildAllVar, mcp(Treatment = "Tukey")) # Solo la variable "Treatment" es significativa
cld(Tukey_glmw, Letters=letters) #Asignamos letras diferentes para los dos tipos de tratamientos
#### Modo matemáticoo ####
# Aquí sacaremos la desviación media, raíz cuadrada y media de las plantas de algodón clasificadas como "Wild" o silvestres
meW<-with(Wild,tapply(Wild$Volumen.en.ug,Treatment,mean)) #La media de la variable Tratamiento. Con la función "with" se pueden hacer evaluaciones (u operaciones) modificando la base de datos original
meW
SEW<-with(Wild,tapply(Wild$Volumen.en.ug,Treatment,sd)/sqrt(summary(Treatment)))# Aqui aplicamos sd, que es desviación media y sqrt, que es la raíz cuadrada. Con la función "tapply", podemos aplicar una operacion matematica a un conjunto de datos previamente seleccionados (en este caso es la desviación media y la raíz cuadrada de la variable Tratamiento)
SEW
SEW<-with(Wild,tapply(Wild$Volumen.en.ug,Treatment,sd)/sqrt(summary(Treatment)))# Aqui aplicamos sd, que es desviación media y sqrt, que es la raíz cuadrada. Con la función "tapply", podemos aplicar una operacion matematica a un conjunto de datos previamente seleccionados (en este caso es la desviación media y la raíz cuadrada de la variable Tratamiento)
SEW
SDW<-with(Wild,tapply(Wild$Volumen.en.ug,Treatment,sd))# Aqui solo aplicamos la desviación media
SDW #Presta atención a los números que salen de estas operaciones
